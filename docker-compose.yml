# root/docker-compose.yml
version: '3.8'
services:
  backend:
    build: ./backend
    ports:
      - "3000:3000"
    depends_on:
      - db
      - redis
      - ollama
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://user:password@db:5432/soc2db
      REDIS_URL: redis://redis:6379
      OLLAMA_URL: http://ollama:11434
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      EMBEDDING_API_URL: https://api.openai.com/v1/embeddings
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - default

  frontend:
    build: ./frontend
    ports:
      - "3001:3001"
    environment:
      VITE_API_URL: http://localhost:3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - default

  db:
    image: ankane/pgvector:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: soc2db
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - default

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    networks:
      - default

  ollama:
    build: ./docker/ollama-llm
    ports:
      - "11434:11434"
    volumes:
      - ollamadata:/root/.ollama
    networks:
      - default

  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheusdata:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - default

  grafana:
    image: grafana/grafana
    volumes:
      - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafanadata:/var/lib/grafana
    ports:
      - "3002:3002"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SERVER_HTTP_PORT: 3002
    depends_on:
      - prometheus
      - loki
    networks:
      - default

  loki:
    image: grafana/loki
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/loki-config.yaml
      - lokidata:/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - default

  jaeger:
    image: jaegertracing/all-in-one
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ':9411'
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # Collector
      - "6831:6831/udp"  # Agent
    networks:
      - default

  kali:
    build: ./docker/kali-toolset
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    networks:
      - isolated-test
      - default
    volumes:
      - ./tmp:/tmp/results
      - ./seclists:/seclists:ro  # SecLists wordlists (read-only)
    command: tail -f /dev/null  # Keep container running

volumes:
  pgdata:
  redisdata:
  ollamadata:
  prometheusdata:
  grafanadata:
  lokidata:

networks:
  default:
    driver: bridge
  isolated-test:
    driver: bridge
    internal: true