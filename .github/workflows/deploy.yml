name: CD Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name'
        required: true
        default: 'latest'

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/soc2-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/soc2-frontend
  KALI_IMAGE: ${{ secrets.DOCKER_USERNAME }}/soc2-kali-toolset
  EMBEDDINGS_IMAGE: ${{ secrets.DOCKER_USERNAME }}/soc2-embeddings

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.BACKEND_IMAGE }}
          ${{ env.FRONTEND_IMAGE }}
          ${{ env.KALI_IMAGE }}
          ${{ env.EMBEDDINGS_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.BACKEND_IMAGE }}:latest
          ${{ env.BACKEND_IMAGE }}:${{ github.event.release.tag_name || github.event.inputs.tag_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.FRONTEND_IMAGE }}:${{ github.event.release.tag_name || github.event.inputs.tag_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push Kali Toolset
      uses: docker/build-push-action@v5
      with:
        context: ./docker/kali-toolset
        push: true
        tags: |
          ${{ env.KALI_IMAGE }}:latest
          ${{ env.KALI_IMAGE }}:${{ github.event.release.tag_name || github.event.inputs.tag_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push Embeddings Service
      uses: docker/build-push-action@v5
      with:
        context: ./docker/ollama-llm/embeddings
        push: true
        tags: |
          ${{ env.EMBEDDINGS_IMAGE }}:latest
          ${{ env.EMBEDDINGS_IMAGE }}:${{ github.event.release.tag_name || github.event.inputs.tag_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Update deployment manifest
      run: |
        echo "## Deployment Manifest" > deployment-manifest.txt
        echo "Release: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}" >> deployment-manifest.txt
        echo "Backend: ${{ env.BACKEND_IMAGE }}:${{ github.event.release.tag_name || github.event.inputs.tag_name }}" >> deployment-manifest.txt
        echo "Frontend: ${{ env.FRONTEND_IMAGE }}:${{ github.event.release.tag_name || github.event.inputs.tag_name }}" >> deployment-manifest.txt
        echo "Kali: ${{ env.KALI_IMAGE }}:${{ github.event.release.tag_name || github.event.inputs.tag_name }}" >> deployment-manifest.txt
        echo "Embeddings: ${{ env.EMBEDDINGS_IMAGE }}:${{ github.event.release.tag_name || github.event.inputs.tag_name }}" >> deployment-manifest.txt
        cat deployment-manifest.txt